{"version":3,"sources":["components/Files/index.js","components/Login/index.js","App.js","serviceWorker.js","index.js"],"names":["kmap","f","o","Object","keys","map","x","render_file_list","title","val","key","file","props","className","onClick","handleLogin","rel","target","href","type","id","name","placeholder","htmlFor","App","useState","logged","setLogged","Files","_","Login","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAaMA,EAAO,SAAAC,GAAC,OAAE,SAAAC,GAAC,OAAGC,OAAOC,KAAKF,GAAGG,KAAI,SAAAC,GAAC,OAAEL,EAAEC,EAAEI,GAAGA,QAG7CC,EAAmBF,eADL,SAAAC,GAAC,OAAE,4BAAKA,EAAEE,UAKb,GAFPR,EAAKA,GADQ,SAACS,EAAIC,GAAL,OAAY,4BAAKA,EAAL,IAAWH,EAAiBE,OACrDT,CAhBM,CACV,KAAO,CACH,EAAI,CACA,CACIQ,MAAM,eACNG,KAAM,wBAaP,SAAAC,GAEb,OACE,yBAAKC,UAAU,oDAEb,yBAAKA,UAAU,kBACb,4BAAQA,UAAU,eAChB,kDAIJ,6BAASA,UAAU,2DACjB,6BAASA,UAAU,YACjB,gCACE,8CACA,yKAEF,iCACE,uCACA,4BACE,8DACA,8DACA,8DACA,iEAKN,4BAAQC,QAASF,EAAMG,aAAvB,yBAGF,4BAAQF,UAAU,UAChB,6BACE,4EAAiD,uBAAGG,IAAI,sBAAsBC,OAAO,SAASC,KAAK,6BAAlD,cAAjD,uBCjDK,WAAAN,GAEb,OACE,yBAAKC,UAAU,oDAEb,yBAAKA,UAAU,kBACb,4BAAQA,UAAU,eAChB,2CAIF,yBAAKA,UAAU,8BACb,6BAASA,UAAU,oBACf,0BAAMA,UAAU,+BACd,yBAAKA,UAAU,uBACb,2BACEM,KAAK,OACLC,GAAG,YACHP,UAAU,uBACVQ,KAAK,QACLC,YAAY,wBAEd,2BAAOC,QAAQ,YAAYV,UAAU,kBAArC,wBAKF,4BAAQC,QAASF,EAAMG,aAAvB,2BAMR,4BAAQF,UAAU,0BAChB,6BACE,4EAAiD,uBAAGG,IAAI,sBAAsBC,OAAO,SAASC,KAAK,6BAAlD,cAAjD,sBCtBGM,MAXf,WAAgB,IAAD,EACcC,oBAAS,GADvB,mBACNC,EADM,KACCC,EADD,KAGb,OACE,yBAAKd,UAAU,mBACZa,GAAU,kBAACE,EAAD,CAAOb,YAAa,SAAAc,GAAC,OAAEF,GAAU,OAC1CD,GAAU,kBAACI,EAAD,CAAOf,YAAa,SAAAc,GAAC,OAAEF,GAAU,QCA/BI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49ff7f24.chunk.js","sourcesContent":["import React from 'react'\nimport {compose,map} from '@geekagency/composite-js'\nconst files = {\n    \"1132\":{\n        \"_\":[\n            {\n                title:\"instructions\",\n                file: \"http://blabla.me\"\n            }\n        ]\n    }\n}\n\nconst kmap = f=>o=> Object.keys(o).map(x=>f(o[x],x))\n\nlet render_file = x=><h1>{x.title}</h1>\nlet render_file_list = map(render_file)\nlet render_level_2 = (val,key)=>(<li>{key}-{render_file_list(val)}</li>)\nlet t = kmap(kmap(render_level_2))(files)\n\nexport default props => {\n\n  return (\n    <div className=\"theme-light_elm cover just-between align-stretch\">\n\n      <div className=\"theme-dark_elm\">\n        <header className=\"main-header\">\n          <h1>Classe N°1132</h1>\n        </header>\n      </div>\n\n      <section className=\"first-category flex flex-column just-center align-start\">\n        <article className=\"1-column\">\n          <header>\n            <h2>Grande Section</h2>\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Hic voluptate labore modi accusamus, soluta nam vero, culpa cum esse eos error.</p>\n          </header>\n          <section>\n            <h4>Dossier</h4>\n            <ul>\n              <li>fichier à télécharger</li>\n              <li>fichier à télécharger</li>\n              <li>fichier à télécharger</li>\n              <li>fichier à télécharger</li>\n            </ul>\n          </section>\n        </article>\n\n        <button onClick={props.handleLogin}>Accéder aux cours</button>\n      </section>\n\n      <footer className=\"footer\">\n        <div>\n          <p>2020 - Designed with love, cocoa and coffe by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.geekagency.ch\">GeekAgency</a> - Switzerland</p>\n        </div>\n      </footer>\n\n    </div>\n\n  )\n\n}\n","import React from 'react'\n\n\n\nexport default props => {\n\n  return (\n    <div className=\"theme-light_elm cover just-between align-stretch\">\n\n      <div className=\"theme-dark_elm\">\n        <header className=\"main-header\">\n          <h1>Elearn-20</h1>\n        </header>\n      </div>\n\n        <div className=\"theme-light_elm contact-us\">\n          <section className=\"flex just-center\">\n              <form className=\"form_login flex flex-column\">\n                <div className=\"floating-label-wrap\">\n                  <input\n                    type=\"text\"\n                    id=\"fieldMail\"\n                    className=\"floating-label-field\"\n                    name=\"email\"\n                    placeholder=\"Quel est ton code ?\"\n                  />\n                  <label htmlFor=\"fieldMail\" className=\"floating-label\">\n                    Quel est ton code ?\n                  </label>\n                </div>\n\n                <button onClick={props.handleLogin}>Accéder aux cours</button>\n              </form>\n          </section>\n\n        </div>\n\n        <footer className=\"theme-light_elm footer\">\n          <div>\n            <p>2020 - Designed with love, cocoa and coffe by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.geekagency.ch\">GeekAgency</a> - Switzerland</p>\n          </div>\n        </footer>\n\n    </div>\n  )\n\n}\n","import React,{useState} from 'react';\nimport Files from './components/Files'\nimport Login from './components/Login'\n\n\n\nfunction App() {\n  const [logged,setLogged] = useState(false)\n\n  return (\n    <div className=\"App theme-light\">\n      {logged && <Files handleLogin={_=>setLogged(false)}/>}\n      {!logged && <Login handleLogin={_=>setLogged(true)}/>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/style.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}